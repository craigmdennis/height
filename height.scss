@import 'functions/parseint';
@import 'functions/roundup';

@import 'functions/parseint';
@import 'functions/roundup';

@mixin height($sh-fontsize, $sh-desiredheight: auto, $sh-baselineoverride: false ) {

  $sh-options: (
    font-base: 16px,
    rem: true,
    baseline: 4px,
    debug: false
  );

  // Check if there are custom sh-options set
  @if global-variable-exists(sassheight) {
    // Merge them with the defaults
    $sh-options: map-merge($sh-options, $sassheight);
  }

  $sh-fontunit: unit($sh-fontsize);
  $sh-fontvalue: parseInt($sh-fontsize) !default;
  $sh-heightunit: if( variable-exists(sh-desiredheight) and $sh-desiredheight != auto, unit($sh-desiredheight), false );
  $sh-heightvalue: if( variable-exists(sh-desiredheight) and $sh-desiredheight != auto, parseInt($sh-desiredheight), false ) !default;
  $sh-fontbase: parseInt(map-get($sh-options, font-base));
  $sh-baseline: if( $sh-baselineoverride, $sh-baselineoverride, parseInt(map-get($sh-options, baseline)) ) !default;
  $sh-modifier: $sh-baseline !default;
  $sh-rem: map-get($sh-options, rem);
  $sh-debug: map-get($sh-options, debug);

  // If rems are enforced
  @if $sh-rem == true {

    // Convert the baseline to unitless rems
    $sh-baseline: $sh-baseline / $sh-fontbase;
    $sh-modifier: $sh-baseline;

    // If the font size is in px
    @if $sh-fontunit != 'rem' {
      $sh-fontvalue: $sh-fontvalue/$sh-fontbase;
    }

    // If the height is in px
    @if $sh-heightunit != 'rem' and $sh-heightunit != false {
      $sh-heightvalue: $sh-heightvalue/$sh-fontbase;
    }
  }

  // If rems are not enforced
  @else if $sh-rem == false {

    // If the font size is in rems
    @if $sh-fontunit == 'rem' {
      $sh-fontvalue: $sh-fontvalue * $sh-fontbase;
    }
    // If the height is in rems
    @if $sh-heightunit == 'rem' {
      $sh-heightvalue: $sh-heightvalue * $sh-fontbase;
    }
  }

  @if $sh-heightunit != 'rem' and $sh-heightunit != false and $sh-heightunit != 'px' and $sh-heightunit != '' {
    @error '#{$sh-heightunit} values are not supported for font-sizes.'
  }

  @else if $sh-fontunit != 'rem' and $sh-fontunit != 'px' and $sh-fontunit != '' {
    @error '#{$sh-fontunit} values are not supported for heights.'
  }

  @else if $sh-fontunit == '' or $sh-heightunit == '' {
    @error 'Unitless values are not supported.'
  }

  // If a height has been specified
  @if $sh-heightunit != false {
    // If the overall height is the same as the font base then
    // it's probably desired so don't step up to the next multiple
    @if ($sh-heightvalue == $sh-fontbase) or ($sh-heightvalue == 1) {
      $sh-modifier: 0;
    }
  }

  // Calculate the relative, valueless line-height
  $sh-lineheight: (roundUp($sh-fontvalue, $sh-baseline) + $sh-modifier) / $sh-fontvalue;

  // If a height has been specified
  @if $sh-heightunit != false {
    // If the font size is greater than the height
    @if $sh-fontvalue > $sh-heightvalue {
      // Round up the height to the nearest baseline multiple to maintain vertical rhythm
      $sh-lineheight: roundUp($sh-heightvalue, $sh-baseline) / $sh-fontvalue;
    }
  }

  // Calculate the actual px dimensions
  $sh-lineheightrealised: $sh-fontvalue * $sh-lineheight;

  // Set the offset to 0 and override if a height is set
  $sh-offset: 0 !default;

  @if $sh-heightunit != false {

    // Calculate the remaining space available and halve it
    $sh-offset: ($sh-heightvalue - $sh-lineheightrealised)/2;

  }

  // Debug
  // Simply output the variables as CSS properties
  // for easy inspection in dev tools.
  @if $sh-debug {
    sh-rem: $sh-rem;
    sh-fontvalue: $sh-fontvalue;
    sh-fontunit: $sh-fontunit;
    sh-heightvalue: $sh-heightvalue;
    sh-heightunit: $sh-heightunit;
    sh-lineheight: $sh-lineheight;
    sh-lineheightrealised: $sh-lineheightrealised;
    sh-offset: $sh-offset;
  }

  font-size: if($sh-rem, $sh-fontvalue + rem, $sh-fontsize);
  line-height: $sh-lineheight;

  // Only add padding if the offset is truthy
  @if $sh-offset > 0 {

    // Determine whether rems or pixels
    $vpadding: if($sh-rem, $sh-offset + rem, $sh-offset + px);
    padding-bottom: $vpadding;
    padding-top: $vpadding;
  }
}